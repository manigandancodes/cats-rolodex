{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","cat","id","alt","width","height","name","CardList","cats","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","makeCats","i","push","Cat","random","state","this","filteredList","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAGaA,G,MAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAAMG,IAAIC,GAApC,aACHC,IAAI,OACJC,MAAM,MACNC,OAAO,QAET,4BAAKP,EAAMG,IAAIK,SCPNC,G,MAAW,SAAAT,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMU,KAAKC,KAAI,SAAAR,GAAG,OACjB,kBAAC,EAAD,CAAMS,IAAKT,EAAIC,GAAID,IAAKA,UCHjBU,G,MAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,YACAC,EAFuB,EAEvBA,aAFuB,OAIvB,2BACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CCG,G,kBAlDb,aAAe,IAAD,8BACZ,+CAQFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAV1B,EAadC,SAAW,WAIT,IAHA,IAAId,EAAO,GAGFe,EAAI,EAAGA,GAFH,GAEgBA,IAC3Bf,EAAKgB,KAAK,CAAElB,KAAMmB,IAAIC,SAAUxB,GAAIqB,EAAI,IAG1C,EAAKL,SAAS,CAAEV,KAAMA,KAlBtB,EAAKmB,MAAQ,CACXnB,KAAM,GACNW,YAAa,IALH,E,iFAyBZS,KAAKN,a,+BAGG,IAAD,EACuBM,KAAKD,MAA3BnB,EADD,EACCA,KAAMW,EADP,EACOA,YACRU,EAAerB,EAAKsB,QAAO,SAAA7B,GAAG,OAClCA,EAAIK,KACDyB,cACAC,SAASb,EAAYY,kBAE1B,OACE,yBAAKhC,UAAU,OACb,4CAEA,kBAAC,EAAD,CACEa,YAAY,cACZC,aAAce,KAAKf,eAGrB,kBAAC,EAAD,CAAUL,KAAMqB,S,GA7CNI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0fd55100.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n  <div className='card-container'>\n    <img\n      src={`https://robohash.org/${props.cat.id}?set=set4`}\n      alt='cats'\n      width='150'\n      height='150'\n    />\n    <h2>{props.cat.name}</h2>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className='card-list'>\n    {props.cats.map(cat => (\n      <Card key={cat.id} cat={cat} />\n    ))}\n  </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({\n  placeholder,\n  handleChange,\n}) => (\n  <input\n    className='search'\n    type='search'\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from 'react';\nimport Cat from 'cat-names';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.components';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cats: [],\n      searchField: '',\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  makeCats = () => {\n    let cats = [];\n    let length = 50;\n\n    for (let i = 0; i <= length; i++) {\n      cats.push({ name: Cat.random(), id: i + 1 });\n    }\n\n    this.setState({ cats: cats });\n  };\n\n  componentDidMount() {\n    this.makeCats();\n  }\n\n  render() {\n    const { cats, searchField } = this.state;\n    const filteredList = cats.filter(cat =>\n      cat.name\n        .toLowerCase()\n        .includes(searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Cats Rolodex</h1>\n\n        <SearchBox\n          placeholder='Search Cats'\n          handleChange={this.handleChange}\n        />\n\n        <CardList cats={filteredList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}